// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol"; // Import Ownable for access control
import "./verifier.sol"; // Import the verifier generated by ZoKrates

contract PrivateTransaction is Verifier, Ownable {
    // Event emitted when a transaction is verified
    event TransactionVerified(address indexed user, uint256 publicValue, uint256 timestamp);
    
    // Mapping to track used proofs to prevent replay attacks
    mapping(bytes32 => bool) private usedProofs;

    /**
     * @dev Verify a transaction using zk-SNARK proof.
     * @param a The first part of the proof.
     * @param b The second part of the proof.
     * @param c The third part of the proof.
     * @param input The public input to the proof.
     */
    function verifyTransaction(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[1] memory input
    ) public {
        // Create a unique identifier for the proof
        bytes32 proofId = keccak256(abi.encodePacked(a, b, c, input));

        // Check if the proof has already been used
        require(!usedProofs[proofId], "Proof has already been used");

        // Verify the proof
        require(verifyTx(a, b, c, input), "Invalid proof");

        // Mark the proof as used
        usedProofs[proofId] = true;

        // Emit an event for the verified transaction
        emit TransactionVerified(msg.sender, input[0], block.timestamp);
    }

    /**
     * @dev Function to reset the used proofs mapping (for testing purposes).
     * Only the owner can call this function.
     */
    function resetUsedProofs() external onlyOwner {
        delete usedProofs;
    }
}
